$Id: TODO,v 1.86 2007-07-13 09:03:48 joostvb Exp $

--- typesetting stuff ---

- get toc printed in html mode. even while using nochunks mode.

- license should be printed, see rh vs deb doc.

- add zoem.mk, for zoem ( http://micans.org/zoem ) typesetting.

--- install stuff ---

- caspar chokes on spaces in filenames:

 Makefile:

 csp_CPDIR = /var/php/public/jccpmanu/https
 include caspar/mk/caspar.mk

 joostvb@scriptix:~/sv...k/sources/jccpmanu/https% ls
 JCCP logo.jpg  Makefile    index.html      logo.html
 JCCPlogo.jpg   empty.html  loginform.html  php3
 joostvb@scriptix:~/sv...k/sources/jccpmanu/https% make -n
 /bin/sh: line 1: test: JCCP: binary operator expected
 /bin/sh: line 1: test: JCCP: binary operator expected
 cp  "JCCPlogo.jpg" /var/php/public/jccpmanu/https;
 cp  "empty.html" /var/php/public/jccpmanu/https;
 cp  "index.html" /var/php/public/jccpmanu/https;
 cp  "loginform.html" /var/php/public/jccpmanu/https;
 cp  "logo.html" /var/php/public/jccpmanu/https;

- Suggest (or offer) a more generic interface than my_EXEC for the load
  target.  Users are invited to extend the interface.
  They can add extra variables to their push mechanisms.  So we might be
  able to abstract LOAD one day.  Perhaps something like

    $(foreach uh,$(csp_UHOSTS),$(call csp_EXEC,$(uh),$(csp_DIR),$(csp_XARG));)

  could work.  If a user's exec wrapper needs more arguments, these can get
  introduced as implicit variables, outside $1, $2, ...

- Get rid of csp_SUHDIRS and other obsolete variable.  Get rid or SCP and CP
  RULEs in caspar.mk.

- Add a real-life complete example to manpage: multiple directories, multiple
  hosts, groups of hosts.  Explain why it's good practice to do
    include ../../include/install.mk
  .

- Supply a preset loop over hosts, for load target.

- Don't do
   csp_scp_FUNC  = $(csp_SCP) $(csp_CPFLAGS) $(1) $(2):$(3)
  but do
   csp_scp_FUNC  = $(csp_SCP) $(4) $(1) $(2):$(3)
  and use $(csp_CPFLAGS) for csp_XARGS.
  _Do_ test this!

- this whole thing could probably better use rsync, or, alternatively, perhaps
  caspar is redundant: there is cfengine.  Perhaps people would be better of
  with a get-started-quick cfengine document. See caspar(7).

- add support for install(1).

- The function $(subst -install,,$@) in caspar.mk breaks when filename itself
  has the substring -install.  We might have to use sed here, and strip only
  a _trailing_ '-install' from the maketarget.

- load stuff:
  - Create a ``load-recursive'' target.
  - supply daemons.mk: csp_SSHDEBIANLOAD csp_URUKREDHATLOAD , etc, to use
    in load targets

- document this:

 dirs = $(patsubst %/Makefile,%,$(shell find * -mindepth 1 -name Makefile))

 all:
   for i in $(dirs);do make -C $$i;done

 install
   for i in $(dirs);do make -C $$i install; done

 load
   for i in $(dirs);do make -C $$i load; done


 This allows a toplevel makefile; _without_ the need to install makefiles in
 all non-leaf directories too.  Thanks Wessel.


- document this: we have a csp_BUILD too.  If you want to do some syntax check
  on remote host too (and have a "make check" thing), do

    csp_LOAD = check my-load

    my-load:
      ssh $(csp_scp_UHOST) do load stuff

    check:
      ssh $(csp_scp_UHOST) do check stuff

  Test wether "make load" won't load if "check" fails (it should).
  Document how to use csp_BUILD.

- install-recursive should call mkdir if appropriate.  install should, too.

 Thu 31 15:16 < Fruit> kan ik 'm ook vertellen dat-ie voordat gaat kopiÃ«ren ff
                       mkdir -p op de smurfer doet?
 Thu 31 15:19 < joostvb> een eigen csp_PUSH schrijven
 Thu 31 15:20 < joostvb> csp_PUSH krijgt zowel filenaam als directory mee als
                         argument
 Thu 31 15:20 < joostvb> dus das kei makkelijk
 Thu 31 15:20 < Fruit> csp_OLD_PUSH := $(csp_PUSH)
 Thu 31 15:20 < Fruit> csp_PUSH := ssh $iets mkdir $dir; $(csp_OLD_PUSH)

- The scp invocation is inefficient:

   % make -n README.txt-install net.txt-install
   scp "README.txt" pong:/data/www/doc/doc/;
   scp "net.txt" pong:/data/www/doc/doc/;

  Should be:

   scp "README.txt" "net.txt" pong:/data/www/doc/doc/;

  $@ vs $? might be helpful.

- Implement csp_UHOSTS_SUBSET: only deal with this subset of csp_UHOSTS.  Just
  process the intersection (doorsnede) of csp_UHOSTS_SUBSET and csp_UHOSTS.
  Requested by Wessel Dankers (and the author).  It'll work nice in cases
  where you have lots of subdirectories holding information for lots of groups
  of hosts when you want to install just for a small group (or 1) hosts.

  It also protects one from no longer current overrides of csp_UHOSTS in the
  environment: one now can use csp_UHOSTS_SUBSET for temporal overrides.

  Test this, and document this.

- test wether file is up to date before scp-ing it.  use rsync?  use
  ControlMaster ssh_config(5) to reuse one ssh conection?  Perhaps this:

   ControlMaster auto
   ControlPath ~/.ssh/control/%r@%h:%p

  in your ~/.ssh/config fixes all "troubles". (This option is not available
  on Debian sarge.)

- document this: including an included Makefile:

    here := $(dir $(lastword $(MAKEFILE_LIST)))
    include $(here)../../foo/bar/install.mk

  Thanks Wessel.

  Alternative: /usr/local/foo, as used in svn/its-unix

- refer to Dutch versiecontrole en packaging document.

joostvb@kovalevskaya:~/sv...vc.uvt.nl/its-unix/group% svnfind -name Makefile | while read f; do sed -i 's/csp_SUHS/csp_UHOSTS/g; s/csp_SUH/csp_UHOST/g; s/csp_SCPDIR/csp_DIR/g' $f; done

joostvb@kovalevskaya:~/sv...vc.uvt.nl/its-unix/group% svnfind -name install.mk | while read f; do sed -i 's/csp_SUHS/csp_UHOSTS/g; s/csp_SUH/csp_UHOST/g; s/csp_SCPDIR/csp_DIR/g' $f; done


- if one really wants, one can overrule caspar's default target:

 ---------

 csp_SCPDIR = /etc/ssl/chains/
 csp_TABOOFILES_ADD = %.asc

 all: install
 install: check makedir

 include ../../../include/install.mk

 check:
        for cert in *.pem; do \
                echo "$$cert:"; \
                gpg --verify $$cert.asc $$cert; \
        done

 makedir:
        for suh in $(csp_SUHS); do \
          ssh $$suh mkdir -p /etc/ssl/chains; \
        done

 .PHONY: check makedir

 ---------

 very likely, one could better use the "build" target for this.

- it's not necessary to have Makefile in all directories of a tree, provided
caspar is fixed:

replace

 DIRS := $(shell for d in *; do test -d $$d && echo $$d; done)

by

 DIRS :=  $(patsubst %/Makefile,%,$(shell find * -mindepth 1 -name Makefile))

thanks Wessel. (See also above)

-
> >>> Stel: user Hans pusht met Caspar een bestand foo.bar naar isar.
> >>> dit bestand is dan van user Hans en group Hans.
> >>> Nu wil user Ko iets aanpassen, maar Ko mag dat niet pushen want het
> >>> bestand is van Hans.
> zetten van chmod g+s op de dir helpt om de group te zetten. Dus dat is
> geregeld.


 Zorg dat op alle desktops het scriptje "csp_install_origal_mode" ergens
in het $PATH van de gebruikers staat, met inhoud:

 #!/bin/sh
 ssh $2 't=`mktemp $3/$1` && cat >$t && mv $t $3/$1' < $1

Voorzie de include/install.mk verder van:

 csp_install_origal_mode_FUNC = csp_install_origal_mode $(1) $(2) $(3)
 csp_PUSH = $(csp_install_origal_mode_FUNC)

.

- "install" moet dependen op "load"
("make" doet zowel "install" als "load" nu; geen "build")

en/of: Eigenlijk zou caspar support voor "make build-recursive" moeten hebben


