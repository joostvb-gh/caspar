\: vim:syntax=tex
\: $Id: caspar.azm,v 1.9 2004-05-31 13:45:05 joostvb Exp $
\: this is a manpage in zoem format.  see http://micans.org/zoem/ and man_zmm(7)

\def{"man::synstyle"}{long}
\def{"man::defstyle"}{long}
\import{man.zmm}

\import{./include.zmm}

\set{"man::name"}{caspar}
\set{"man::html-title"}{caspar}

\"man::preamble"
\${html}{\"man::maketoc"}

\def{"docbook.mk"}{\it{docbook.mk}}
\def{"pod.mk"}{\it{pod.mk}}
\def{"caspar.mk"}{\it{caspar.mk}}
\def{caspar}{\bf{caspar}}
\def{"install.mk"}{\it{install.mk}}

\sec{name}{NAME}
  \par
  caspar - Makefile snippets for common tasks

\sec{synopsis}{SYNOPSIS}

In a Makefile, do either

\verbatim{
  include caspar/mk/caspar.mk
}

or

\verbatim{
  include caspar/mk/docbook.mk
}

or

\verbatim{
  include caspar/mk/pod.mk
}
.

\sec{description}{DESCRIPTION}

Caspar offers Makefile snippets for common tasks, like installing stuff you've
got under version control, or typesetting LaTeX, DocBook XML and DocBook SGML
documents.
  \par
The typesetting functionality is delivered by \"docbook.mk" and \"pod.mk".
This is documented in \sibref{caspar-typesetting}{caspar-typesetting(7)}.
  \par
The installing-stuff-under-version-control functionality is delivered by
\"caspar.mk".  (That's what the rest of the manual will talk about.)  It
enables one to run 'make install' from within a CVS (or Subversion or any other
version control system, for that matter) tree.
  \par
It is useful in cases like this: all configuration files of some host are under
version control, and, after commiting a change to CVS, you want to be able to
easily install the new configuration file on the host.
  \par
With \caspar, all you have to do is specify the hostname in one place, and
specify the name of the target directory in each CVS directory.
  \par

\sec{usage}{USAGE}

Within a CVS tree, create a file \it{include/install.mk}, with contents like
e.g.

\verbatim{
 csp_SUH = root@some.host.somewhere
 include caspar/mk/caspar.mk
}

.  Within each other directory of the CVS tree which holds files, create a
Makefile, which looks like e.g.

\verbatim{
 csp_DIR = /some/dir/ectory/
 include ../../include/install.mk
}
.

From within the CVS tree, one can call:

\verbatim{
  make <filename>-install
  make install
  make load
  make
}

\sec{variables}{VARIABLES}

The variables one can set in a calling Makefile are:

\begin{itemize}{
  {contiguous}{1}
  {w1}{7}
}
  \item{\tt{csp_CP}}       cp binary, just "cp" by default
  \item{\tt{csp_CPFLAGS}}  extra arguments to pass to cp invocation, none by
    default
  \item{\tt{csp_SCP}}      scp binary, just "scp" by default
  \item{\tt{csp_SCPFLAGS}} extra arguments to pass to scp invocation, e.g.
    '\tt{-i .ssh/id_rsa-root}'
  \item{\tt{csp_SUH}}      ssh-reachable user@host (Secure User at Host)
  \item{\tt{csp_SUHS}}     space separated list of ssh-reachable user@host
    items (Secure User at HostS)
  \item{\tt{csp_CPDIR}}    directory to which we can cp(1), instead of scp
    (CoPy DIRectory)
  \item{\tt{csp_CPDIRS}}   space separated list of directories to which we can
    copy (CoPy DIRectorieS)
  \item{\tt{csp_SCPDIR}}   directory on ssh reachable host, with trailing /
    (Secure CoPy DIRectory)
  \item{\tt{csp_SUHDIRS}}  this is the list \tt{$(csp_SUH):$(dir)} for each
    \tt{$(dir)} in \tt{$(csp_SUHS)} (or where \tt{dir = $(csp_SCPDIR)}, in
    case \tt{csp_SUHS} is not set).
    However, more items can get added to this list on the fly.
  \item{\tt{csp_LOAD}}     targets which should depend on the `load' target.
\end{itemize}


\sec{examples}{EXAMPLES}

Some examples:

Using \tt{csp_CPDIR} and \tt{csp_LOAD}: \it{username/etc/Makefile} is

\verbatim{
  csp_CPDIR = $(HOME)/etc/
  csp_LOAD = crontab-load
  include ../include/install.mk

  crontab-load:
        crontab $(csp_CPDIR)/crontab
}

while \it{../include/install.mk} is just

\verbatim{
  include caspar/mk/caspar.mk
}
.

Using \tt{csp_SCPDIR} and \tt{csp_LOAD}: \it{etc/Makefile} is

\verbatim{
  csp_SCPDIR = /etc/
  csp_LOAD = aliases-load
  include ../include/install.mk

  aliases-load:
      ssh $(csp_SUH) "cd /etc; postalias aliases; postfix reload"
}

while \it{../include/install.mk} is

\verbatim{
  csp_SUH = root@some.host.somewhere
  include caspar/mk/caspar.mk
}

More advanced tricks: supply e.g.

\verbatim{
 csp_SUHS = root@localhost root@some.host.somewhere
}

in \"install.mk", to install on multiple hosts.

Run

\verbatim{
 csp_SUH=joe@otherhost make filename-install
}

to install filename as \tt{joe@otherhost}, instead of the default as given in
\"install.mk".

When you don't want to ssh to \tt{root@some.host.somewhere} directly, you could
do

\verbatim{
 sudo rsync -az /path/to/your/config_archive /etc
}
.

\sec{files}{FILES}

\par
 \it{caspar/mk/caspar.mk}, \it{caspar/mk/docbook.mk}, \it{caspar/mk/pod.mk}

\sec{environment}{ENVIRONMENT}

For \"caspar.mk": \tt{csp_CPDIR}, \tt{csp_CP}, \tt{csp_CPFLAGS}, \tt{csp_LOAD},
\tt{csp_SCP}, \tt{csp_SCPFLAGS}, \tt{csp_SUH}, \tt{csp_SUHS}.

\sec{bugs}{BUGS}

See TODO and/or BUGS, distributed with the caspar package.  (And online
at \httpref{http://mdcc.cx/pub/caspar/caspar-latest/TODO}.)

\sec{trivia}{TRIVIA}

caspar is named after Caspar the Friendly Ghost, since that's the title
of the Daniel Johnston song I was listening to when deciding to package
my homegrown scripts.

\sec{author}{AUTHOR}

\"man::author"

\sec{seealso}{SEE ALSO}

\sibref{caspar-typesetting}{caspar-typesetting(7)}
  \par
The caspar homepage is at \httpref{http://mdcc.cx/caspar/} .
  \par
The `cvs-conf' package ( \httpref{http://project.tuxfamily.org/cvs-conf},
\httpref{http://packages.debian.org/stable/utils/cvs-conf.html} ) probably
offers about the same functionality as \"caspar.mk".  However, this package
seems largely unmaintained (between September 2002 and May 2004, at
least).
  \par
docbookmk, by Michael Wiedmann ( \httpref{http://www.miwie.org/docbkmake/} )
offers probably a superset of Caspar's \"docbook.mk" functionality.

\"man::postamble"


